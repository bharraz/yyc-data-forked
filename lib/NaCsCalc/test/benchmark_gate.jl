#!/usr/bin/julia

using NaCsCalc
using BenchmarkTools

const Clf = NaCsCalc.Clifford

@inline function benchmark(state, gate::Clf.Clifford1Q)
    n = state.n
    for i in 1:n
        Clf.apply!(state, gate, i)
    end
end

@inline function benchmark(state, gate::Clf.Clifford2Q)
    n = state.n
    for i in 1:n
        for j in 1:n - 1
            j = j < i ? j : j + 1
            Clf.apply!(state, gate, i, j)
        end
    end
end

const state1_1 = Clf.StabilizerState(29)
const state1_2 = Clf.StabilizerState(271)
const state1_3 = Clf.StabilizerState(5000)
const state2_1 = Clf.InvStabilizerState(29)
const state2_2 = Clf.InvStabilizerState(271)
const state2_3 = Clf.InvStabilizerState(5000)

# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
println("IGate")
@btime benchmark($(state1_1), Clf.IGate())
@btime benchmark($(state1_2), Clf.IGate())
@btime benchmark($(state1_3), Clf.IGate())
@btime benchmark($(state2_1), Clf.IGate())
@btime benchmark($(state2_2), Clf.IGate())
@btime benchmark($(state2_3), Clf.IGate())

# 64.071 ns (0 allocations: 0 bytes)
# 2.361 μs (0 allocations: 0 bytes)
# 434.488 μs (0 allocations: 0 bytes)
# 54.525 ns (0 allocations: 0 bytes)
# 1.029 μs (0 allocations: 0 bytes)
# 280.909 μs (0 allocations: 0 bytes)
println("HGate")
@btime benchmark($(state1_1), Clf.HGate())
@btime benchmark($(state1_2), Clf.HGate())
@btime benchmark($(state1_3), Clf.HGate())
@btime benchmark($(state2_1), Clf.HGate())
@btime benchmark($(state2_2), Clf.HGate())
@btime benchmark($(state2_3), Clf.HGate())

# 63.816 ns (0 allocations: 0 bytes)
# 1.421 μs (0 allocations: 0 bytes)
# 135.830 μs (0 allocations: 0 bytes)
# 16.324 ns (0 allocations: 0 bytes)
# 144.155 ns (0 allocations: 0 bytes)
# 2.509 μs (0 allocations: 0 bytes)
println("XGate")
@btime benchmark($(state1_1), Clf.XGate())
@btime benchmark($(state1_2), Clf.XGate())
@btime benchmark($(state1_3), Clf.XGate())
@btime benchmark($(state2_1), Clf.XGate())
@btime benchmark($(state2_2), Clf.XGate())
@btime benchmark($(state2_3), Clf.XGate())

# 64.411 ns (0 allocations: 0 bytes)
# 1.379 μs (0 allocations: 0 bytes)
# 246.535 μs (0 allocations: 0 bytes)
# 22.673 ns (0 allocations: 0 bytes)
# 189.273 ns (0 allocations: 0 bytes)
# 3.349 μs (0 allocations: 0 bytes)
println("YGate")
@btime benchmark($(state1_1), Clf.YGate())
@btime benchmark($(state1_2), Clf.YGate())
@btime benchmark($(state1_3), Clf.YGate())
@btime benchmark($(state2_1), Clf.YGate())
@btime benchmark($(state2_2), Clf.YGate())
@btime benchmark($(state2_3), Clf.YGate())

# 63.773 ns (0 allocations: 0 bytes)
# 1.438 μs (0 allocations: 0 bytes)
# 136.622 μs (0 allocations: 0 bytes)
# 13.986 ns (0 allocations: 0 bytes)
# 123.336 ns (0 allocations: 0 bytes)
# 2.092 μs (0 allocations: 0 bytes)
println("ZGate")
@btime benchmark($(state1_1), Clf.ZGate())
@btime benchmark($(state1_2), Clf.ZGate())
@btime benchmark($(state1_3), Clf.ZGate())
@btime benchmark($(state2_1), Clf.ZGate())
@btime benchmark($(state2_2), Clf.ZGate())
@btime benchmark($(state2_3), Clf.ZGate())

# 65.499 ns (0 allocations: 0 bytes)
# 2.134 μs (0 allocations: 0 bytes)
# 304.991 μs (0 allocations: 0 bytes)
# 78.257 ns (0 allocations: 0 bytes)
# 1.137 μs (0 allocations: 0 bytes)
# 268.076 μs (0 allocations: 0 bytes)
println("SGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.498 ns (0 allocations: 0 bytes)
# 2.134 μs (0 allocations: 0 bytes)
# 310.241 μs (0 allocations: 0 bytes)
# 78.215 ns (0 allocations: 0 bytes)
# 1.137 μs (0 allocations: 0 bytes)
# 268.617 μs (0 allocations: 0 bytes)
println("ISGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 65.540 ns (0 allocations: 0 bytes)
# 2.134 μs (0 allocations: 0 bytes)
# 303.617 μs (0 allocations: 0 bytes)
# 78.215 ns (0 allocations: 0 bytes)
# 1.137 μs (0 allocations: 0 bytes)
# 267.035 μs (0 allocations: 0 bytes)
println("SXGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.498 ns (0 allocations: 0 bytes)
# 2.125 μs (0 allocations: 0 bytes)
# 306.492 μs (0 allocations: 0 bytes)
# 78.257 ns (0 allocations: 0 bytes)
# 1.137 μs (0 allocations: 0 bytes)
# 266.118 μs (0 allocations: 0 bytes)
println("ISXGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 1.946 μs (0 allocations: 0 bytes)
# 557.485 μs (0 allocations: 0 bytes)
# 2.767 s (0 allocations: 0 bytes)
# 3.906 μs (0 allocations: 0 bytes)
# 682.982 μs (0 allocations: 0 bytes)
# 2.355 s (0 allocations: 0 bytes)
println("CNOTGate")
@btime benchmark($(state1_1), Clf.CNOTGate())
@btime benchmark($(state1_2), Clf.CNOTGate())
@btime benchmark($(state1_3), Clf.CNOTGate())
@btime benchmark($(state2_1), Clf.CNOTGate())
@btime benchmark($(state2_2), Clf.CNOTGate())
@btime benchmark($(state2_3), Clf.CNOTGate())
