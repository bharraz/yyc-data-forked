#!/usr/bin/julia

using NaCsCalc
using BenchmarkTools

const Clf = NaCsCalc.Clifford

@inline function benchmark(state, gate::Clf.Clifford1Q)
    n = state.n
    for i in 1:n
        Clf.apply!(state, gate, i)
    end
end

@inline function benchmark(state, gate::Clf.Clifford2Q)
    n = state.n
    for i in 1:n
        for j in 1:n - 1
            j = j < i ? j : j + 1
            Clf.apply!(state, gate, i, j)
        end
    end
end

const state1_1 = Clf.StabilizerState(29)
const state1_2 = Clf.StabilizerState(271)
const state1_3 = Clf.StabilizerState(5000)
const state2_1 = Clf.InvStabilizerState(29)
const state2_2 = Clf.InvStabilizerState(271)
const state2_3 = Clf.InvStabilizerState(5000)

# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
println("IGate")
@btime benchmark($(state1_1), Clf.IGate())
@btime benchmark($(state1_2), Clf.IGate())
@btime benchmark($(state1_3), Clf.IGate())
@btime benchmark($(state2_1), Clf.IGate())
@btime benchmark($(state2_2), Clf.IGate())
@btime benchmark($(state2_3), Clf.IGate())

# 64.008 ns (0 allocations: 0 bytes)
# 2.357 μs (0 allocations: 0 bytes)
# 435.396 μs (0 allocations: 0 bytes)
# 59.660 ns (0 allocations: 0 bytes)
# 1.137 μs (0 allocations: 0 bytes)
# 285.056 μs (0 allocations: 0 bytes)
println("HGate")
@btime benchmark($(state1_1), Clf.HGate())
@btime benchmark($(state1_2), Clf.HGate())
@btime benchmark($(state1_3), Clf.HGate())
@btime benchmark($(state2_1), Clf.HGate())
@btime benchmark($(state2_2), Clf.HGate())
@btime benchmark($(state2_3), Clf.HGate())

# 63.820 ns (0 allocations: 0 bytes)
# 1.433 μs (0 allocations: 0 bytes)
# 135.840 μs (0 allocations: 0 bytes)
# 23.009 ns (0 allocations: 0 bytes)
# 144.805 ns (0 allocations: 0 bytes)
# 2.509 μs (0 allocations: 0 bytes)
println("XGate")
@btime benchmark($(state1_1), Clf.XGate())
@btime benchmark($(state1_2), Clf.XGate())
@btime benchmark($(state1_3), Clf.XGate())
@btime benchmark($(state2_1), Clf.XGate())
@btime benchmark($(state2_2), Clf.XGate())
@btime benchmark($(state2_3), Clf.XGate())

# 64.416 ns (0 allocations: 0 bytes)
# 1.363 μs (0 allocations: 0 bytes)
# 247.803 μs (0 allocations: 0 bytes)
# 22.675 ns (0 allocations: 0 bytes)
# 189.277 ns (0 allocations: 0 bytes)
# 3.349 μs (0 allocations: 0 bytes)
println("YGate")
@btime benchmark($(state1_1), Clf.YGate())
@btime benchmark($(state1_2), Clf.YGate())
@btime benchmark($(state1_3), Clf.YGate())
@btime benchmark($(state2_1), Clf.YGate())
@btime benchmark($(state2_2), Clf.YGate())
@btime benchmark($(state2_3), Clf.YGate())

# 63.779 ns (0 allocations: 0 bytes)
# 1.413 μs (0 allocations: 0 bytes)
# 139.131 μs (0 allocations: 0 bytes)
# 13.986 ns (0 allocations: 0 bytes)
# 123.808 ns (0 allocations: 0 bytes)
# 2.093 μs (0 allocations: 0 bytes)
println("ZGate")
@btime benchmark($(state1_1), Clf.ZGate())
@btime benchmark($(state1_2), Clf.ZGate())
@btime benchmark($(state1_3), Clf.ZGate())
@btime benchmark($(state2_1), Clf.ZGate())
@btime benchmark($(state2_2), Clf.ZGate())
@btime benchmark($(state2_3), Clf.ZGate())

# 65.504 ns (0 allocations: 0 bytes)
# 2.116 μs (0 allocations: 0 bytes)
# 302.387 μs (0 allocations: 0 bytes)
# 180.423 ns (0 allocations: 0 bytes)
# 1.979 μs (0 allocations: 0 bytes)
# 273.802 μs (0 allocations: 0 bytes)
println("SGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.520 ns (0 allocations: 0 bytes)
# 2.120 μs (0 allocations: 0 bytes)
# 296.262 μs (0 allocations: 0 bytes)
# 180.423 ns (0 allocations: 0 bytes)
# 1.979 μs (0 allocations: 0 bytes)
# 273.468 μs (0 allocations: 0 bytes)
println("ISGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 65.460 ns (0 allocations: 0 bytes)
# 2.102 μs (0 allocations: 0 bytes)
# 298.219 μs (0 allocations: 0 bytes)
# 180.423 ns (0 allocations: 0 bytes)
# 1.979 μs (0 allocations: 0 bytes)
# 272.051 μs (0 allocations: 0 bytes)
println("SXGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.520 ns (0 allocations: 0 bytes)
# 2.116 μs (0 allocations: 0 bytes)
# 300.344 μs (0 allocations: 0 bytes)
# 180.423 ns (0 allocations: 0 bytes)
# 1.979 μs (0 allocations: 0 bytes)
# 273.676 μs (0 allocations: 0 bytes)
println("ISXGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 1.946 μs (0 allocations: 0 bytes)
# 551.767 μs (0 allocations: 0 bytes)
# 3.336 s (0 allocations: 0 bytes)
# 9.708 μs (0 allocations: 0 bytes)
# 1.075 ms (0 allocations: 0 bytes)
# 3.031 s (0 allocations: 0 bytes)
println("CNOTGate")
@btime benchmark($(state1_1), Clf.CNOTGate())
@btime benchmark($(state1_2), Clf.CNOTGate())
@btime benchmark($(state1_3), Clf.CNOTGate())
@btime benchmark($(state2_1), Clf.CNOTGate())
@btime benchmark($(state2_2), Clf.CNOTGate())
@btime benchmark($(state2_3), Clf.CNOTGate())
