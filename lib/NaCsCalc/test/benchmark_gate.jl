#!/usr/bin/julia

using NaCsCalc
using BenchmarkTools

const Clf = NaCsCalc.Clifford

@inline function benchmark(state, gate::Clf.Clifford1Q)
    n = state.n
    @inbounds for i in 1:n
        Clf.apply!(state, gate, i)
    end
end

@inline function benchmark(state, gate::Clf.Clifford2Q)
    n = state.n
    @inbounds for i in 1:n
        for j in 1:n - 1
            j = j < i ? j : j + 1
            Clf.apply!(state, gate, i, j)
        end
    end
end

const state1_1 = Clf.StabilizerState(29)
const state1_2 = Clf.StabilizerState(271)
const state1_3 = Clf.StabilizerState(5000)
const state2_1 = Clf.InvStabilizerState(29)
const state2_2 = Clf.InvStabilizerState(271)
const state2_3 = Clf.InvStabilizerState(5000)

# 50.278 ns (0 allocations: 0 bytes)
# 878.320 ns (0 allocations: 0 bytes)
# 163.081 μs (0 allocations: 0 bytes)
# 41.582 ns (0 allocations: 0 bytes)
# 827.587 ns (0 allocations: 0 bytes)
# 166.664 μs (0 allocations: 0 bytes)
println("Init X")
@btime Clf.init_state_x!($(state1_1))
@btime Clf.init_state_x!($(state1_2))
@btime Clf.init_state_x!($(state1_3))
@btime Clf.init_state_x!($(state2_1))
@btime Clf.init_state_x!($(state2_2))
@btime Clf.init_state_x!($(state2_3))

# 50.278 ns (0 allocations: 0 bytes)
# 878.300 ns (0 allocations: 0 bytes)
# 171.081 μs (0 allocations: 0 bytes)
# 41.750 ns (0 allocations: 0 bytes)
# 849.868 ns (0 allocations: 0 bytes)
# 167.123 μs (0 allocations: 0 bytes)
println("Init Z")
@btime Clf.init_state_z!($(state1_1))
@btime Clf.init_state_z!($(state1_2))
@btime Clf.init_state_z!($(state1_3))
@btime Clf.init_state_z!($(state2_1))
@btime Clf.init_state_z!($(state2_2))
@btime Clf.init_state_z!($(state2_3))

# 2.250 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
println("IGate")
@btime benchmark($(state1_1), Clf.IGate())
@btime benchmark($(state1_2), Clf.IGate())
@btime benchmark($(state1_3), Clf.IGate())
@btime benchmark($(state2_1), Clf.IGate())
@btime benchmark($(state2_2), Clf.IGate())
@btime benchmark($(state2_3), Clf.IGate())

# 63.477 ns (0 allocations: 0 bytes)
# 2.338 μs (0 allocations: 0 bytes)
# 432.538 μs (0 allocations: 0 bytes)
# 52.526 ns (0 allocations: 0 bytes)
# 999.900 ns (0 allocations: 0 bytes)
# 281.165 μs (0 allocations: 0 bytes)
println("HGate")
@btime benchmark($(state1_1), Clf.HGate())
@btime benchmark($(state1_2), Clf.HGate())
@btime benchmark($(state1_3), Clf.HGate())
@btime benchmark($(state2_1), Clf.HGate())
@btime benchmark($(state2_2), Clf.HGate())
@btime benchmark($(state2_3), Clf.HGate())

# 62.967 ns (0 allocations: 0 bytes)
# 1.421 μs (0 allocations: 0 bytes)
# 135.540 μs (0 allocations: 0 bytes)
# 15.322 ns (0 allocations: 0 bytes)
# 139.856 ns (0 allocations: 0 bytes)
# 2.593 μs (0 allocations: 0 bytes)
println("XGate")
@btime benchmark($(state1_1), Clf.XGate())
@btime benchmark($(state1_2), Clf.XGate())
@btime benchmark($(state1_3), Clf.XGate())
@btime benchmark($(state2_1), Clf.XGate())
@btime benchmark($(state2_2), Clf.XGate())
@btime benchmark($(state2_3), Clf.XGate())

# 64.030 ns (0 allocations: 0 bytes)
# 1.354 μs (0 allocations: 0 bytes)
# 241.040 μs (0 allocations: 0 bytes)
# 20.352 ns (0 allocations: 0 bytes)
# 178.772 ns (0 allocations: 0 bytes)
# 3.135 μs (0 allocations: 0 bytes)
println("YGate")
@btime benchmark($(state1_1), Clf.YGate())
@btime benchmark($(state1_2), Clf.YGate())
@btime benchmark($(state1_3), Clf.YGate())
@btime benchmark($(state2_1), Clf.YGate())
@btime benchmark($(state2_2), Clf.YGate())
@btime benchmark($(state2_3), Clf.YGate())

# 62.967 ns (0 allocations: 0 bytes)
# 1.417 μs (0 allocations: 0 bytes)
# 136.874 μs (0 allocations: 0 bytes)
# 14.320 ns (0 allocations: 0 bytes)
# 123.332 ns (0 allocations: 0 bytes)
# 2.097 μs (0 allocations: 0 bytes)
println("ZGate")
@btime benchmark($(state1_1), Clf.ZGate())
@btime benchmark($(state1_2), Clf.ZGate())
@btime benchmark($(state1_3), Clf.ZGate())
@btime benchmark($(state2_1), Clf.ZGate())
@btime benchmark($(state2_2), Clf.ZGate())
@btime benchmark($(state2_3), Clf.ZGate())

# 65.348 ns (0 allocations: 0 bytes)
# 2.102 μs (0 allocations: 0 bytes)
# 299.747 μs (0 allocations: 0 bytes)
# 61.161 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 272.206 μs (0 allocations: 0 bytes)
println("SGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.372 ns (0 allocations: 0 bytes)
# 2.097 μs (0 allocations: 0 bytes)
# 298.706 μs (0 allocations: 0 bytes)
# 61.183 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 272.540 μs (0 allocations: 0 bytes)
println("ISGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 65.373 ns (0 allocations: 0 bytes)
# 2.093 μs (0 allocations: 0 bytes)
# 294.706 μs (0 allocations: 0 bytes)
# 61.183 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 272.122 μs (0 allocations: 0 bytes)
println("SXGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.372 ns (0 allocations: 0 bytes)
# 2.097 μs (0 allocations: 0 bytes)
# 294.331 μs (0 allocations: 0 bytes)
# 61.183 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 272.789 μs (0 allocations: 0 bytes)
println("ISXGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 1.925 μs (0 allocations: 0 bytes)
# 541.371 μs (0 allocations: 0 bytes)
# 2.512 s (0 allocations: 0 bytes)
# 3.078 μs (0 allocations: 0 bytes)
# 557.079 μs (0 allocations: 0 bytes)
# 2.324 s (0 allocations: 0 bytes)
println("CNOTGate")
@btime benchmark($(state1_1), Clf.CNOTGate())
@btime benchmark($(state1_2), Clf.CNOTGate())
@btime benchmark($(state1_3), Clf.CNOTGate())
@btime benchmark($(state2_1), Clf.CNOTGate())
@btime benchmark($(state2_2), Clf.CNOTGate())
@btime benchmark($(state2_3), Clf.CNOTGate())
