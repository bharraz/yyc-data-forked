#!/usr/bin/julia

using NaCsCalc
using BenchmarkTools

const Clf = NaCsCalc.Clifford

@inline function benchmark(state, gate::Clf.Clifford1Q)
    n = state.n
    for i in 1:n
        Clf.apply!(state, gate, i)
    end
end

@inline function benchmark(state, gate::Clf.Clifford2Q)
    n = state.n
    for i in 1:n
        for j in 1:n - 1
            j = j < i ? j : j + 1
            Clf.apply!(state, gate, i, j)
        end
    end
end

const state1_1 = Clf.StabilizerState(29)
const state1_2 = Clf.StabilizerState(271)
const state1_3 = Clf.StabilizerState(5000)
const state2_1 = Clf.InvStabilizerState(29)
const state2_2 = Clf.InvStabilizerState(271)
const state2_3 = Clf.InvStabilizerState(5000)

# 2.250 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
# 2.250 ns (0 allocations: 0 bytes)
# 2.583 ns (0 allocations: 0 bytes)
# 2.291 ns (0 allocations: 0 bytes)
println("IGate")
@btime benchmark($(state1_1), Clf.IGate())
@btime benchmark($(state1_2), Clf.IGate())
@btime benchmark($(state1_3), Clf.IGate())
@btime benchmark($(state2_1), Clf.IGate())
@btime benchmark($(state2_2), Clf.IGate())
@btime benchmark($(state2_3), Clf.IGate())

# 63.478 ns (0 allocations: 0 bytes)
# 2.361 μs (0 allocations: 0 bytes)
# 439.206 μs (0 allocations: 0 bytes)
# 52.093 ns (0 allocations: 0 bytes)
# 995.800 ns (0 allocations: 0 bytes)
# 277.207 μs (0 allocations: 0 bytes)
println("HGate")
@btime benchmark($(state1_1), Clf.HGate())
@btime benchmark($(state1_2), Clf.HGate())
@btime benchmark($(state1_3), Clf.HGate())
@btime benchmark($(state2_1), Clf.HGate())
@btime benchmark($(state2_2), Clf.HGate())
@btime benchmark($(state2_3), Clf.HGate())

# 62.926 ns (0 allocations: 0 bytes)
# 1.429 μs (0 allocations: 0 bytes)
# 135.666 μs (0 allocations: 0 bytes)
# 15.322 ns (0 allocations: 0 bytes)
# 139.859 ns (0 allocations: 0 bytes)
# 2.593 μs (0 allocations: 0 bytes)
println("XGate")
@btime benchmark($(state1_1), Clf.XGate())
@btime benchmark($(state1_2), Clf.XGate())
@btime benchmark($(state1_3), Clf.XGate())
@btime benchmark($(state2_1), Clf.XGate())
@btime benchmark($(state2_2), Clf.XGate())
@btime benchmark($(state2_3), Clf.XGate())

# 63.988 ns (0 allocations: 0 bytes)
# 1.400 μs (0 allocations: 0 bytes)
# 241.874 μs (0 allocations: 0 bytes)
# 20.352 ns (0 allocations: 0 bytes)
# 178.782 ns (0 allocations: 0 bytes)
# 3.135 μs (0 allocations: 0 bytes)
println("YGate")
@btime benchmark($(state1_1), Clf.YGate())
@btime benchmark($(state1_2), Clf.YGate())
@btime benchmark($(state1_3), Clf.YGate())
@btime benchmark($(state2_1), Clf.YGate())
@btime benchmark($(state2_2), Clf.YGate())
@btime benchmark($(state2_3), Clf.YGate())

# 62.967 ns (0 allocations: 0 bytes)
# 1.446 μs (0 allocations: 0 bytes)
# 139.916 μs (0 allocations: 0 bytes)
# 13.986 ns (0 allocations: 0 bytes)
# 123.338 ns (0 allocations: 0 bytes)
# 2.093 μs (0 allocations: 0 bytes)
println("ZGate")
@btime benchmark($(state1_1), Clf.ZGate())
@btime benchmark($(state1_2), Clf.ZGate())
@btime benchmark($(state1_3), Clf.ZGate())
@btime benchmark($(state2_1), Clf.ZGate())
@btime benchmark($(state2_2), Clf.ZGate())
@btime benchmark($(state2_3), Clf.ZGate())

# 65.348 ns (0 allocations: 0 bytes)
# 2.148 μs (0 allocations: 0 bytes)
# 300.790 μs (0 allocations: 0 bytes)
# 61.164 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 266.457 μs (0 allocations: 0 bytes)
println("SGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.391 ns (0 allocations: 0 bytes)
# 2.148 μs (0 allocations: 0 bytes)
# 295.748 μs (0 allocations: 0 bytes)
# 61.184 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 266.290 μs (0 allocations: 0 bytes)
println("ISGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 65.391 ns (0 allocations: 0 bytes)
# 2.139 μs (0 allocations: 0 bytes)
# 296.790 μs (0 allocations: 0 bytes)
# 61.183 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 266.329 μs (0 allocations: 0 bytes)
println("SXGate")
@btime benchmark($(state1_1), Clf.SGate())
@btime benchmark($(state1_2), Clf.SGate())
@btime benchmark($(state1_3), Clf.SGate())
@btime benchmark($(state2_1), Clf.SGate())
@btime benchmark($(state2_2), Clf.SGate())
@btime benchmark($(state2_3), Clf.SGate())

# 65.415 ns (0 allocations: 0 bytes)
# 2.153 μs (0 allocations: 0 bytes)
# 296.079 μs (0 allocations: 0 bytes)
# 61.164 ns (0 allocations: 0 bytes)
# 1.079 μs (0 allocations: 0 bytes)
# 266.288 μs (0 allocations: 0 bytes)
println("ISXGate")
@btime benchmark($(state1_1), Clf.ISGate())
@btime benchmark($(state1_2), Clf.ISGate())
@btime benchmark($(state1_3), Clf.ISGate())
@btime benchmark($(state2_1), Clf.ISGate())
@btime benchmark($(state2_2), Clf.ISGate())
@btime benchmark($(state2_3), Clf.ISGate())

# 1.925 μs (0 allocations: 0 bytes)
# 575.741 μs (0 allocations: 0 bytes)
# 2.388 s (0 allocations: 0 bytes)
# 3.151 μs (0 allocations: 0 bytes)
# 656.448 μs (0 allocations: 0 bytes)
# 2.058 s (0 allocations: 0 bytes)
println("CNOTGate")
@btime benchmark($(state1_1), Clf.CNOTGate())
@btime benchmark($(state1_2), Clf.CNOTGate())
@btime benchmark($(state1_3), Clf.CNOTGate())
@btime benchmark($(state2_1), Clf.CNOTGate())
@btime benchmark($(state2_2), Clf.CNOTGate())
@btime benchmark($(state2_3), Clf.CNOTGate())
