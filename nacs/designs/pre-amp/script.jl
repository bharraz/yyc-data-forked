#!/usr/bin/julia

calc_gain(r1, r2) = r2 / r1

function calc_params(r1, r2, r3, c1, c2)
    g = calc_gain(r1, r2)
    sqrtrc = √(r2 * r3 * c1 * c2)
    fc = 1 / 2 / π / sqrtrc
    q = sqrtrc / (r3 * c1 + r2 * c1 + r3 * c1 * g)
    return fc, q
end

function calc_reff(r′, r1)
    g = r′ / (r1 + r′)
    reff = g * r1
    return g, reff
end

function find_param(rs, cs, gcnd, fccnd, qcnd)
    for r1 in rs
        if r1 < 1
            continue
        elseif r1 > 20
            break
        end
        for r2 in rs
            g = calc_gain(r1, r2)
            gcnd(g) || continue
            for c1 in cs
                if c1 > 3000
                    break
                end
                for r3 in rs
                    for c2 in cs
                        fc, q = calc_params(r1, r2, r3, c1, c2)
                        if fccnd(fc) && qcnd(q)
                            println((r1, r2, r3, c1, c2), " -> ", (g, fc / 1.2736 * 1e6, q))
                        end
                    end
                end
            end
        end
    end
end

function find_param′(rs, cs, gcnd, fccnd, qcnd)
    for r′ in rs
        for r1′ in rs
            if r1′ < 1
                continue
            elseif r1′ > 10
                break
            elseif r′ > r1′ * 10
                continue
            elseif r′ < r1′ / 10
                break
            end
            g′, r1 = calc_reff(r′, r1′)
            for r2 in rs
                g = calc_gain(r1, r2) * g′
                gcnd(g) || continue
                for c1 in cs
                    if c1 > 2000
                        break
                    end
                    for r3 in rs
                        for c2 in cs
                            fc, q = calc_params(r1, r2, r3, c1, c2)
                            if fccnd(fc) && qcnd(q)
                                println((r′, r1′, r2, r3, c1, c2), " -> ",
                                        (g, fc / 1.2736 * 1e6, q))
                            end
                        end
                    end
                end
            end
        end
    end
end
# rs = [1, 1.01, 1.02, 1.05, 1.07, 1.1, 1.13, 1.15, 1.18, 1.2, 1.21, 1.24, 1.27,
#       1.3, 1.33, 1.37, 1.4, 1.43, 1.47, 1.5, 1.54, 1.58, 1.6, 1.62, 1.65, 1.69,
#       1.74, 1.78, 1.8, 1.82, 1.87, 1.91, 1.96, 2, 2.05, 2.1, 2.15, 2.2, 2.21,
#       2.26, 2.32, 2.37, 2.4, 2.43, 2.49, 2.5, 2.52, 2.55, 2.61, 2.67, 2.7, 2.74,
#       2.8, 2.87, 2.94, 3, 3.01, 3.09, 3.12, 3.16, 3.24, 3.3, 3.32, 3.4, 3.48,
#       3.57, 3.6, 3.65, 3.74, 3.83, 3.88, 3.9, 3.92, 4.02, 4.12, 4.22, 4.3, 4.32,
#       4.42, 4.53, 4.64, 4.7, 4.75, 4.87, 4.99, 5, 5.1, 5.11, 5.23, 5.36, 5.49,
#       5.6, 5.62, 5.76, 5.9, 6.04, 6.12, 6.19, 6.2, 6.34, 6.49, 6.57, 6.65, 6.8,
#       6.81, 6.98, 7.15, 7.32, 7.5, 7.68, 7.87, 8, 8.06, 8.2, 8.25, 8.35, 8.45,
#       8.66, 8.87, 9.09, 9.1, 9.31, 9.42, 9.53, 9.76, 10, 10.1, 10.2, 10.5, 10.7,
#       11, 11.1, 11.3, 11.5, 11.8, 12, 12.1, 12.4, 12.7, 13, 13.3, 13.7, 13.8,
#       14, 14.3, 14.7, 15, 15.4, 15.8, 16, 16.2, 16.5, 16.9, 17.4, 17.8, 18,
#       18.2, 18.7, 19.1, 19.6, 20, 20.5, 20.8, 21, 21.5, 22, 22.1, 22.6, 23.2,
#       23.7, 24, 24.3, 24.9, 25, 25.5, 26.1, 26.7, 27, 27.4, 28, 28.4, 28.7,
#       29.4, 30, 30.1, 30.9, 31.2, 31.6, 32.4, 33, 33.2, 34, 34.8, 35.7, 36,
#       36.5, 37.4, 38.3, 39, 39.2, 40, 40.2, 41.2, 42.2, 43, 43.2, 44.2, 45.3,
#       46.4, 47, 47.5, 48.7, 49.9, 50, 51, 51.1, 52.3, 53.6, 54.9, 56, 56.2,
#       57.6, 59, 60.4, 61.9, 62, 63.4, 64.9, 66.5, 68, 68.1, 69.8, 71.5, 73.2,
#       75, 76.8, 78.7, 80, 80.6, 82, 82.5, 84.5, 86.6, 88.7, 89.8, 90.9, 91,
#       93.1, 94.2, 95.3, 97.6, 100, 102, 105, 107, 110, 113, 115, 118, 120, 121,
#       124, 127, 130, 133, 137, 140, 143, 147, 150, 154, 158, 160, 162, 165, 169,
#       172, 174, 178, 180, 182, 187, 191, 196, 200, 205, 210, 213, 215, 220, 221,
#       226, 232, 237, 240, 243, 249, 255, 261, 267, 270, 274, 280, 287, 294, 300,
#       301, 309, 316, 324, 330, 332, 340, 348, 357, 360, 365, 374, 383, 390, 392,
#       402, 412, 422, 430, 432, 442, 453, 464, 470, 475, 487, 499, 510, 511, 560,
#       620, 680, 750, 820]
# cs = [100, 120, 150, 160, 180, 200, 220, 270, 330, 390, 470, 620, 680,
#       750, 820, 910, 1000, 1500, 1800, 2200, 3300, 3900, 4700, 5600,
#       6800, 8200, 10000, 15000]

# Resistor values (kOhm)
rsk = [1, 1.01, 1.02, 1.05, 1.07, 1.1, 1.13, 1.15, 1.18, 1.2, 1.21, 1.24, 1.27,
       1.3, 1.33, 1.37, 1.4, 1.43, 1.47, 1.5, 1.54, 1.58, 1.6, 1.62, 1.65, 1.69,
       1.74, 1.78, 1.8, 1.82, 1.87, 1.91, 1.96, 2, 2.05, 2.1, 2.15, 2.2, 2.21,
       2.26, 2.32, 2.37, 2.4, 2.43, 2.49, 2.5, 2.52, 2.55, 2.61, 2.67, 2.7, 2.74,
       2.8, 2.87, 2.94, 3, 3.01, 3.09, 3.12, 3.16, 3.24, 3.3, 3.32, 3.4, 3.48,
       3.57, 3.6, 3.65, 3.74, 3.83, 3.88, 3.9, 3.92, 4.02, 4.12, 4.22, 4.3, 4.32,
       4.42, 4.53, 4.64, 4.7, 4.75, 4.87, 4.99, 5, 5.1, 5.11, 5.23, 5.36, 5.49,
       5.6, 5.62, 5.76, 5.9, 6.04, 6.12, 6.19, 6.2, 6.34, 6.49, 6.57, 6.65, 6.8,
       6.81, 6.98, 7.15, 7.32, 7.5, 7.68, 7.87, 8, 8.06, 8.2, 8.25, 8.35, 8.45,
       8.66, 8.87, 9.09, 9.1, 9.31, 9.42, 9.53, 9.76, 10, 10.1, 10.2, 10.5, 10.7,
       11, 11.1, 11.3, 11.5, 11.8, 12, 12.1, 12.4, 12.7, 13, 13.3, 13.7, 13.8,
       14, 14.3, 14.7, 15, 15.4, 15.8, 16, 16.2, 16.5, 16.9, 17.4, 17.8, 18,
       18.2, 18.7, 19.1, 19.6, 20, 20.5, 20.8, 21, 21.5, 22, 22.1, 22.6, 23.2,
       23.7, 24, 24.3, 24.9, 25, 25.5, 26.1, 26.7, 27, 27.4, 28, 28.4, 28.7,
       29.4, 30, 30.1, 30.9, 31.2, 31.6, 32.4, 33, 33.2, 34, 34.8, 35.7, 36,
       36.5, 37.4, 38.3, 39, 39.2, 40, 40.2, 41.2, 42.2, 43, 43.2, 44.2, 45.3,
       46.4, 47, 47.5, 48.7, 49.9, 50]

rs1 = [100, 102, 105, 107, 110, 113, 115, 118, 120, 121, 124, 127, 130, 133,
       137, 140, 143, 147, 150, 154, 158, 160, 162, 165, 169, 174, 178, 180,
       182, 187, 191, 196, 200, 205, 210, 215, 220, 221, 226, 232, 237, 240,
       243, 249, 250, 255, 261, 267, 270, 274, 280, 287, 294, 300, 301, 309,
       316, 324, 330, 332, 340, 348, 357, 360, 365, 374, 383, 390, 392, 400,
       402, 407, 412, 422, 430, 432, 442, 453, 464, 470, 475, 487, 499, 500,
       510, 511, 523, 536, 549, 560, 562, 576, 590, 604, 619, 620, 634, 649,
       665, 680, 681, 690, 698, 715, 732, 750, 768, 787, 806, 820, 825, 845,
       866, 887, 909, 910, 931, 953, 976]

rs = [rs1 .* 1e-3; rsk]

# Capacitor values (pF)
cs = [620, 680, 750, 820, 910, 1000, 1500, 1800, 2200, 3300, 3900, 4700, 5600,
      6800, 8200, 10000, 15000]

find_param(rs, cs, g->1 <= g <= 1.01, fc->10000e-9 <= fc / 1.2736 <= 11000e-9,
           q->0.57725 < q < 0.57735)
# Gain 1.0-1.01, fc 10-11kHz
# (1.54, 1.54, 11.1, 910, 10000) -> (1.0, 10.019465063261071, 0.577325099435703)
# Gain 0.5-0.51, fc 10-11kHz
# (5.0, 2.5, 17.4, 750, 4700) -> (0.5, 10.0916665507571, 0.5772937990927391)
# Gain 0.25-0.255, fc 10-11kHz
# (2.21, 0.562, 18.7, 820, 15000) -> (0.2542986425339367, 10.991211488689425, 0.5773005236767788)
# Gain 1.0-1.01, fc 20-21kHz
# (4.99, 5.0, 4.64, 750, 2200) -> (1.002004008016032, 20.197662768283134, 0.5773162601107192)
# Gain 0.5-0.51, fc 20-21kHz
# (2.0, 1.01, 10.7, 620, 5600) -> (0.505, 20.400680168862205, 0.5773137553151363)
# Gain 0.25-0.255, fc 20-21kHz
# (2.7, 0.681, 10.7, 750, 6800) -> (0.25222222222222224, 20.49918280711098, 0.577289248333715)
# Gain 1.0-1.01, fc 30-31kHz
# (1.01, 1.01, 1.1, 2200, 6800) -> (1.0, 30.652383819229332, 0.5772914335151902)
# Gain 0.5-0.51, fc 30-31kHz
# (3.88, 1.96, 6.34, 620, 2200) -> (0.5051546391752577, 30.353392057069545, 0.5772834495471149)
# Gain 0.25-0.255, fc 30-31kHz
# (1.82, 0.464, 6.57, 820, 6800) -> (0.2549450549450549, 30.30986650886067, 0.5773264601866939)

# find_param′(rs, cs, g->0.2 <= g <= 0.205, fc->10000e-9 <= fc / 1.2736 <= 11000e-9,
#              q->0.57725 < q < 0.57735)
# (1.47, 5.62, 0.562, 17.8, 620, 15000) -> (0.1, 12.955895846763138, 0.5773175772938283)
# (1.33, 3.48, 0.698, 16.2, 620, 15000) -> (0.20057471264367818, 12.18597796224354, 0.5773265301229235)
